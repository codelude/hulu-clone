{"version":3,"sources":["Header.js","requests.js","Nav.js","axios.js","VideoCard.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setSelectedOption","onClick","requests","instance","axios","create","baseURL","base_url","VideoCard","forwardRef","ref","movie","console","log","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","media_type","release_date","first_air_date","ThumbUpSharp","vote_count","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6577796c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\nimport VideoLibraryIcon from \"@material-ui/icons/VideoLibrary\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header__icons\">\n        <div className=\"header__icon header__icon--active\">\n          <HomeIcon />\n          <p>Home</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <FlashOnIcon />\n          <p>Trending</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <LiveTvIcon />\n          <p>Verified</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <VideoLibraryIcon />\n          <p>Collections</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <SearchIcon />\n          <p>Search</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <PersonOutlineIcon />\n          <p>Account</p>\n        </div>\n      </div>\n      <img\n        src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\"\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default Header;\n","// Typically we would store in {process.env.API_KEY}\nconst API_KEY = \"f81980ff410e46f422d64ddf3a56dddd\";\n\nexport default {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n  fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\n  fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\n  fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n  fetchTV: `/discover/movie?api_key=${API_KEY}&with_genres=10770`,\n};\n","import React from \"react\";\nimport \"./Nav.css\";\nimport requests from \"./requests\";\n\nfunction Nav({ setSelectedOption }) {\n  return (\n    <div className=\"nav\">\n      <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>\n        Trending\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchTopRated)}>\n        Top Rated\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchActionMovies)}>\n        Action\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchComedyMovies)}>\n        Comedy\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchHorrorMovies)}>\n        Horror\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchRomanceMovies)}>\n        Romance\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchMystery)}>Mystery</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchSciFi)}>Sci-Fi</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchWestern)}>Western</h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchAnimation)}>\n        Animation\n      </h2>\n      <h2 onClick={() => setSelectedOption(requests.fetchTV)}>TV Movie</h2>\n    </div>\n  );\n}\n\nexport default Nav;\n","import axios from \"axios\";\n\n/** base url to make requests to the the movie database */\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import { ThumbUpSharp } from \"@material-ui/icons\";\nimport React, { forwardRef } from \"react\";\nimport \"./VideoCard.css\";\nimport TextTruncate from \"react-text-truncate\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst VideoCard = forwardRef(({ movie }, ref) => {\n  console.log(movie);\n  return (\n    <div ref={ref} className=\"videoCard\">\n      <img\n        src={\n          `${base_url}${movie.backdrop_path || movie.poster_path}` ||\n          `${base_url}${movie.poster_path}`\n        }\n        alt=\"\"\n      />\n      <TextTruncate\n        line={1}\n        element=\"p\"\n        truncateText=\"…\"\n        text={movie.overview}\n      />\n\n      <h2>{movie.title || movie.original_name}</h2>\n      <p className=\"videoCard__stats\">\n        {movie.media_type && `${movie.media_type} •`}{\" \"}\n        {movie.release_date || movie.first_air_date} • <ThumbUpSharp />{\" \"}\n        {movie.vote_count}\n      </p>\n    </div>\n  );\n});\n\nexport default VideoCard;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Results.css\";\nimport axios from \"./axios\";\nimport VideoCard from \"./VideoCard\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Results({ selectedOption }) {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(selectedOption);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [selectedOption]);\n\n  console.log(movies);\n\n  return (\n    <div className=\"results\">\n      <FlipMove>\n        {movies.map((movie) => (\n          <VideoCard key={movie.id} movie={movie} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Nav from \"./Nav\";\nimport Results from \"./Results\";\nimport requests from \"./requests\";\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState(requests.fetchTrending);\n\n  return (\n    <>\n      <div className=\"app\">\n        <Header />\n        <Nav setSelectedOption={setSelectedOption} />\n        <Results selectedOption={selectedOption} />\n      </div>\n      <div className=\"app__backShadow\" />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}